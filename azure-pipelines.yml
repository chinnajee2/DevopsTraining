pool:
  vmImage: 'Ubuntu-16.04'
  demands:
    - npm

variables:
  buildConfig: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSDKver: '2.1.505'

trigger:
  branches:
    include:
      - '*'
  paths:
    exclude:
      - docs/*

steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core SDK $(dotnetSDKver)'
    inputs:
      version: '$(dotnetSDKver)'

  - task: Npm@1
    displayName: 'Run npm install'
    inputs:
      verbose: false

  - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
    displayName: 'Compile Sass assets'

  - task: gulp@1
    displayName: 'Run gulp tasks'

  - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    displayName: 'Write build info'
    workingDirectory: $(wwwrootDir)

  - task: DotNetCoreCLI@2
    displayName: 'Restore project dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build the project - $(buildConfig)'
    inputs:
      command: 'build'
      arguments: '--no-restore --configuration $(buildConfig)'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator'
    inputs:
      command: custom
      custom: tool
      arguments: 'install --global dotnet-reportgenerator-globaltool'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests - $(buildConfig)'
    inputs:
      command: 'test'
      arguments: '--no-build --configuration $(buildConfig) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
      publishTestResults: true
      projects: '**/*.Tests.csproj'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
  
  - task: DotNetCoreCLI@2
    displayName: 'Publish the project - $(buildConfig)'
    inputs:
      command: 'publish'
      projects: '**/*.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)/Release'
      zipAfterPublish: true

  - template: templates/build.yml
    parameters:
      buildConfiguration: 'Debug'

  - template: templates/build.yml
    parameters:
      buildConfiguration: 'Release'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    condition: succeeded()
